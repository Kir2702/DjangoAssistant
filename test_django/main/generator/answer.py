from jinja2 import Template
from . import adaptation
import re
import datetime
from json import loads



test = str('test')

########[—Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞]#############################################################################################################
def type(bo_data):
    type = 'undefined' # –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    status_list=[]
    for l in bo_data.json():
        status_list.append(l.get("DisplayCssClass"))
    # —É–±–µ—Ä–∞–µ–º –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
    cash_list = []
    for i in status_list:
        cash_list.append(i)
    S = set()
    status_list = []
    for e in cash_list:
        if e in S:
            continue
        S.add(e)
        status_list.append(e)
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
    if len(status_list) == 1:
        if status_list[0] == 'progress':
            type = 'booked'
        if status_list[0] == 'error':
            type = 'error'
        if status_list[0] == 'success':
            type = 'success'
    if len(status_list) > 1:
        if 'success' in status_list or 'return' in status_list:
            type = 'success'
    return type



######################################################################################################################################################

########[—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É]################################################################################################
def success_json(bo_data, sj_data):
    for l in sj_data.json():
        # –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        orderidinjson = l.get("orderid")
        # –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω
        login = l.get("login")
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É
        email = l.get("email")
        censorship = re.findall(r'(?<=\S)(\S+)[@]', email)
        if len(censorship) == 0:
            email_cens = re.findall(r'[@]\S+', email)
            email_cens = ('*' + email_cens[0])
        else:
            email_cens = re.sub(r'(?<=\S)(\S+)[@]', '*' * len(censorship[0]) + '@', email)
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ Unix —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_time_create = l.get("datetime")
        date_time_create = re.findall(r'^\d\d\d\d\d\d\d\d\d\d', date_time_create)
        date_time_create = int((date_time_create[0]))
        date_time_create = datetime.datetime.fromtimestamp(date_time_create).strftime('%d.%m.%y' " –≤ " '%H:%M')

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∞–Ω–∫–æ–≤
    blanks = []

    for l in bo_data.json():
        # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ
        if l.get("UiSimpleStatus") == 'Success':
            # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏
            if l.get("DisplayType") == '–ü–æ–∫—É–ø–∫–∞':
                # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –±–ª–∞–Ω–∫–∞
                blank_status = l.get("UiSimpleStatus")
                # –Ω–∞—Ö–æ–¥–∏–º —Ç–∏–ø –±–ª–∞–Ω–∫–∞
                blank_type = l.get("DisplayServiceType")
                #
                main_item_id = l.get("MainItemId")
                # –Ω–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç—É
                blanks_info = l.get("Blanks")
                #print(blanks_info) # –æ—Ç–ª–∞–¥–∫–∞
                for blank_info in blanks_info:
                    # C—â–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º  –∏–Ω—Ñ—É –ø–æ –±–ª–∞–Ω–∫—É
                    blank = {}
                    # –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞
                    blank_number = blank_info.get("BlankNumber")
                    # id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
                    item_id = blank_info.get("OrderItemId")
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
                    blank_customers = blank_info.get("BlankCustomers")
                    # ID—à–Ω–∏–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
                    customers_id = []
                    for customer in blank_customers:
                        customer_id = customer.get('OrderCustomerId')
                        customers_id.append(customer_id)
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ blank
                    blank['item_id'] = item_id
                    blank['main_item_id'] = main_item_id
                    blank['blank_number'] = blank_number
                    blank['blank_type'] = blank_type
                    blank['blank_status'] = blank_status
                    blank['customers_id'] = customers_id
                    blanks.append(blank)
            
    for blank in blanks:
        # –≤ —É–∂–µ –≥–æ—Ç–æ–≤–æ–º —Å–ø–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –∂–¥ –±–∏–ª–µ—Ç—ã
        if blank['blank_type'] == '–ñ–î-–±–∏–ª–µ—Ç—ã':
            # –ø–æ–ª—É—á–∞–µ–º id –±–ª–æ–∫–∞ –±–ª–∞–Ω–∫–æ–≤ –∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ json
            json_item_id_blank = blank['item_id']
            for l in bo_data.json():
                # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ item_id —Å —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–û
                if int(json_item_id_blank) == int(l.get("OrderItemId")):
                    # –µ—Å–ª–∏ —Å—Ö–æ–¥—è—Ç—Å—è –ª–µ–∂–µ–º –≤ –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ–π –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
                    route_parts = l.get("RouteParts")
                    for rout in route_parts:
                        if int(json_item_id_blank) == int(rout.get("OrderItemId")):
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            origin_point = rout.get("OriginPoint").get("Name")
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è
                            destination_point = rout.get("DestinationPoint").get("Name")
                            # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                            full_rout = str(origin_point + " ü†ñ " + destination_point)
                            # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞
                            train_number = rout.get("TripNumber")
                            # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            departure_date_time = rout.get("Departure")
                            departure_date_time = re.sub(r'[T]', ' ', departure_date_time)
                            departure_time = re.findall(r'\d\d:\d\d:\d\d$', departure_date_time)
                            departure_year = re.findall(r'\d{4}', departure_date_time)
                            departure_year = re.findall(r'\d\d$', departure_year[0])
                            departure_month_day = re.findall(r'\b\d\d', departure_date_time)
                            departure_date_time = (departure_month_day[2] + '.' + departure_month_day[1] + '.' +  departure_year[0] + ' –≤ ' +  departure_time[0])
                            departure_date_time = re.sub(r'\S\S\S$', '', departure_date_time)
                            # –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['rout'] = full_rout
                            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['train_number'] = train_number
                            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['departure_date_time'] = departure_date_time
    
    json = {
        'order_id': orderidinjson,  
        'login': login,
        'email': email_cens,
        'date_time_create': date_time_create,
        'blanks': blanks
        }
    return json


########[—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞]##################################################
def success_adaptation(json):
    #—Ñ—É—Ç–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ "–∑–∞–∫–∞–∑ –≤–∫–ª—é—á–∞–µ—Ç...."
    order_includes = adaptation.order_includes(json)
    info_bloks = adaptation.info_bloks(json)
    json['order_includes'] = order_includes
    json['info_bloks'] = info_bloks
    return json

########[—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–∑ –≤ —à–∞–±–ª–æ–Ω]##################################################
def success_template(json):
    with open("main/generator/success.txt", "r", encoding="utf-8") as template:
        read_template = template.read()
    read_template = Template(read_template, trim_blocks = True)
    answer = read_template.render(json)
    return answer

#################################################################################
def success(bo_data, sj_data):
    #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    json = success_json(bo_data, sj_data)
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç json
    json = success_adaptation(json)
    #–∑–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    answer = success_template(json)
    return answer

######################################################################################################################################################
######################################################################################################################################################
########[—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É –æ—à–∏–±–∫–∏]################################################################################################
def error_json(bo_data, sj_data):
    for l in sj_data.json():
        # –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        orderidinjson = l.get("orderid")
        # –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω
        login = l.get("login")
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É
        email = l.get("email")
        censorship = re.findall(r'(?<=\S)(\S+)[@]', email)
        if len(censorship) == 0:
            email_cens = re.findall(r'[@]\S+', email)
            email_cens = ('*' + email_cens[0])
        else:
            email_cens = re.sub(r'(?<=\S)(\S+)[@]', '*' * len(censorship[0]) + '@', email)
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ Unix —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_time_create = l.get("datetime")
        date_time_create = re.findall(r'^\d\d\d\d\d\d\d\d\d\d', date_time_create)
        date_time_create = int((date_time_create[0]))
        date_time_create = datetime.datetime.fromtimestamp(date_time_create).strftime('%d.%m.%y' " –≤ " '%H:%M')
        # –ø–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
        response = l.get('response')
        response = loads(response)
        agent_payment_id = response['AgentPaymentId']



    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∞–Ω–∫–æ–≤
    blanks = []
    for l in bo_data.json():
        print(l.get("UiSimpleStatus"))
        # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ
        if l.get("UiSimpleStatus") == 'Error':
            # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏
            if l.get("DisplayType") == '–ü–æ–∫—É–ø–∫–∞':
                # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –±–ª–∞–Ω–∫–∞
                blank_status = l.get("UiSimpleStatus")
                # –Ω–∞—Ö–æ–¥–∏–º —Ç–∏–ø –±–ª–∞–Ω–∫–∞
                blank_type = l.get("DisplayServiceType")
                print(blank_type)
                #
                main_item_id = l.get("MainItemId")
                # –Ω–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç—É
                blanks_info = l.get("Blanks")
                # print(blanks_info) # –æ—Ç–ª–∞–¥–∫–∞
                for blank_info in blanks_info:
                    # C—â–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º  –∏–Ω—Ñ—É –ø–æ –±–ª–∞–Ω–∫—É
                    blank = {}
                    # –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞
                    blank_number = blank_info.get("BlankNumber")
                    # id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    item_id = blank_info.get("OrderItemId")
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
                    blank_customers = blank_info.get("BlankCustomers")
                    # ID—à–Ω–∏–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
                    customers_id = []
                    for customer in blank_customers:
                        customer_id = customer.get('OrderCustomerId')
                        customers_id.append(customer_id)
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ blank
                    blank['item_id'] = item_id
                    blank['main_item_id'] = main_item_id
                    blank['blank_number'] = blank_number
                    blank['blank_type'] = blank_type
                    blank['blank_status'] = blank_status
                    blank['customers_id'] = customers_id
                    blanks.append(blank)
    for blank in blanks:
        # –≤ —É–∂–µ –≥–æ—Ç–æ–≤–æ–º —Å–ø–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –∂–¥ –±–∏–ª–µ—Ç—ã
        if blank['blank_type'] == '–ñ–î-–±–∏–ª–µ—Ç—ã':
            # –ø–æ–ª—É—á–∞–µ–º id –±–ª–æ–∫–∞ –±–ª–∞–Ω–∫–æ–≤ –∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ json
            json_item_id_blank = blank['item_id']
            for l in bo_data.json():
                # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ item_id —Å —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–û
                if int(json_item_id_blank) == int(l.get("OrderItemId")):
                    # –µ—Å–ª–∏ —Å—Ö–æ–¥—è—Ç—Å—è –ª–µ–∂–µ–º –≤ –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ–π –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
                    route_parts = l.get("RouteParts")
                    for rout in route_parts:
                        if int(json_item_id_blank) == int(rout.get("OrderItemId")):
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            origin_point = rout.get("OriginPoint").get("Name")
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è
                            destination_point = rout.get("DestinationPoint").get("Name")
                            # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                            full_rout = str(origin_point + " ü†ñ " + destination_point)
                            # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞
                            train_number = rout.get("TripNumber")
                            # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            departure_date_time = rout.get("Departure")
                            departure_date_time = re.sub(r'[T]', ' ', departure_date_time)
                            departure_time = re.findall(r'\d\d:\d\d:\d\d$', departure_date_time)
                            departure_year = re.findall(r'\d{4}', departure_date_time)
                            departure_year = re.findall(r'\d\d$', departure_year[0])
                            departure_month_day = re.findall(r'\b\d\d', departure_date_time)
                            departure_date_time = (
                                        departure_month_day[2] + '.' + departure_month_day[1] + '.' + departure_year[
                                    0] + ' –≤ ' + departure_time[0])
                            departure_date_time = re.sub(r'\S\S\S$', '', departure_date_time)
                            # –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['rout'] = full_rout
                            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['train_number'] = train_number
                            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['departure_date_time'] = departure_date_time

    json = {
        'order_id': orderidinjson,
        'login': login,
        'email': email_cens,
        'date_time_create': date_time_create,
        'agent_payment_id': agent_payment_id,
        'blanks': blanks
    }
    return json


########[—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞]##################################################
def error_adaptation(json):
    # —Ñ—É—Ç–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ "–∑–∞–∫–∞–∑ –≤–∫–ª—é—á–∞–µ—Ç...."
    order_includes = adaptation.order_includes(json)
    info_bloks_without_status = adaptation.info_bloks_without_status(json)
    json['info_bloks_without_status '] = info_bloks_without_status
    return json


########[—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–∑ –≤ —à–∞–±–ª–æ–Ω]##################################################
def error_template(json):
    with open("main/generator/error.txt", "r", encoding="utf-8") as template:
        read_template = template.read()
    read_template = Template(read_template, trim_blocks=True)
    answer = read_template.render(json)
    return answer


#################################################################################
def error(bo_data, sj_data):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    json = error_json(bo_data, sj_data)
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç json
    print(json)
    json = error_adaptation(json)
    # –∑–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    answer = error_template(json)
    return answer

######################################################################################################################################################
######################################################################################################################################################
########[—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É]################################################################################################
def booked_json(bo_data, sj_data):
    for l in sj_data.json():
        # –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        orderidinjson = l.get("orderid")
        # –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω
        login = l.get("login")
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É
        email = l.get("email")
        censorship = re.findall(r'(?<=\S)(\S+)[@]', email)
        if len(censorship) == 0:
            email_cens = re.findall(r'[@]\S+', email)
            email_cens = ('*' + email_cens[0])
        else:
            email_cens = re.sub(r'(?<=\S)(\S+)[@]', '*' * len(censorship[0]) + '@', email)
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ Unix —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_time_create = l.get("datetime")
        date_time_create = re.findall(r'^\d\d\d\d\d\d\d\d\d\d', date_time_create)
        date_time_create = int((date_time_create[0]))
        date_time_create = datetime.datetime.fromtimestamp(date_time_create).strftime('%d.%m.%y' " –≤ " '%H:%M')

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∞–Ω–∫–æ–≤
    blanks = []

    for l in bo_data.json():
        # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ
        if l.get("UiSimpleStatus") == 'InProgress':
            # –æ—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏
            if l.get("DisplayType") == '–ü–æ–∫—É–ø–∫–∞':
                # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –±–ª–∞–Ω–∫–∞
                blank_status = l.get("UiSimpleStatus")
                # –Ω–∞—Ö–æ–¥–∏–º —Ç–∏–ø –±–ª–∞–Ω–∫–∞
                blank_type = l.get("DisplayServiceType")
                #
                main_item_id = l.get("MainItemId")
                # –Ω–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç—É
                blanks_info = l.get("Blanks")
                # print(blanks_info) # –æ—Ç–ª–∞–¥–∫–∞
                for blank_info in blanks_info:
                    # C—â–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º  –∏–Ω—Ñ—É –ø–æ –±–ª–∞–Ω–∫—É
                    blank = {}
                    # –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞
                    blank_number = blank_info.get("BlankNumber")
                    # id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    item_id = blank_info.get("OrderItemId")
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
                    blank_customers = blank_info.get("BlankCustomers")
                    # ID—à–Ω–∏–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
                    customers_id = []
                    for customer in blank_customers:
                        customer_id = customer.get('OrderCustomerId')
                        customers_id.append(customer_id)
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ blank
                    blank['item_id'] = item_id
                    blank['main_item_id'] = main_item_id
                    blank['blank_number'] = blank_number
                    blank['blank_type'] = blank_type
                    blank['blank_status'] = blank_status
                    blank['customers_id'] = customers_id
                    blanks.append(blank)

    for blank in blanks:
        # –≤ —É–∂–µ –≥–æ—Ç–æ–≤–æ–º —Å–ø–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –∂–¥ –±–∏–ª–µ—Ç—ã
        if blank['blank_type'] == '–ñ–î-–±–∏–ª–µ—Ç—ã':
            # –ø–æ–ª—É—á–∞–µ–º id –±–ª–æ–∫–∞ –±–ª–∞–Ω–∫–æ–≤ –∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ json
            json_item_id_blank = blank['item_id']
            for l in bo_data.json():
                # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ item_id —Å —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–û
                if int(json_item_id_blank) == int(l.get("OrderItemId")):
                    # –µ—Å–ª–∏ —Å—Ö–æ–¥—è—Ç—Å—è –ª–µ–∂–µ–º –≤ –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ–π –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
                    route_parts = l.get("RouteParts")
                    for rout in route_parts:
                        if int(json_item_id_blank) == int(rout.get("OrderItemId")):
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            origin_point = rout.get("OriginPoint").get("Name")
                            # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è
                            destination_point = rout.get("DestinationPoint").get("Name")
                            # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                            full_rout = str(origin_point + " ü†ñ " + destination_point)
                            # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞
                            train_number = rout.get("TripNumber")
                            # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            departure_date_time = rout.get("Departure")
                            departure_date_time = re.sub(r'[T]', ' ', departure_date_time)
                            departure_time = re.findall(r'\d\d:\d\d:\d\d$', departure_date_time)
                            departure_year = re.findall(r'\d{4}', departure_date_time)
                            departure_year = re.findall(r'\d\d$', departure_year[0])
                            departure_month_day = re.findall(r'\b\d\d', departure_date_time)
                            departure_date_time = (
                                        departure_month_day[2] + '.' + departure_month_day[1] + '.' + departure_year[
                                    0] + ' –≤ ' + departure_time[0])
                            departure_date_time = re.sub(r'\S\S\S$', '', departure_date_time)
                            # –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['rout'] = full_rout
                            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['train_number'] = train_number
                            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                            blank['departure_date_time'] = departure_date_time

    json = {
        'order_id': orderidinjson,
        'login': login,
        'email': email_cens,
        'date_time_create': date_time_create,
        'blanks': blanks
    }
    return json


########[—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞]##################################################
def booked_adaptation(json):
    return json


########[—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–∑ –≤ —à–∞–±–ª–æ–Ω]##################################################
def booked_template(json):
    with open("main/generator/booked.txt", "r", encoding="utf-8") as template:
        read_template = template.read()
    read_template = Template(read_template, trim_blocks=True)
    answer = read_template.render(json)
    return answer


#################################################################################
def booked(bo_data, sj_data):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    json = booked_json(bo_data, sj_data)
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç json
    json = booked_adaptation(json)
    # –∑–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    answer = booked_template(json)
    return answer
    
